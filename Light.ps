//전역변수

Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
};

//타입정의
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;	//조도
	float4 color;
	float3 reflection;
	float4 specular;

	//샘플러를 사용해 텍스처에서 좌표에 있는 색을 가져옴
	textureColor = shaderTexture.Sample(SampleType,input.tex);

	//모든 픽셀에 엠비언트의 값을 출력 컬러로 설정
	color = ambientColor;

	//계산을 위해 빛의 방향을 변환
	lightDir = -lightDirection;

	//픽셀에 닿는 빛의 양을 계산
	lightIntensity = saturate(dot(input.normal,lightDir));	//dot() = 내적

	if(lightIntensity > 0.0f) //내적의 값이 0보다 클 경우
	{
		//디퓨즈 색과 빛의 양을 기반으로 최종 디퓨즈 색을 결정
		color += (diffuseColor + lightIntensity);

		//1을 넘기지 못하게 함
		color = saturate(color);

		//빛의 세기, 시선 방향, 노말 벡터를 이용하여 반사벡터를 계산
		reflection = normalize(2*lightIntensity * input.normal - lightDir);

		//반사벡터, 시선 방향, 반사력을 이용하여 반사 광의 양을 결정
		specular = pow(saturate(dot(reflection,input.viewDirection)),specularPower);
	}

	//최종 확산 색과 텍스처 색을 곱하여 픽셀의 색을 결정
	color = color*textureColor;
	color=color*ambientColor;
	//반사광을 추가 
	//마지막에 추가를 해야함
	color = saturate(color+specular);

	return color;	
}

